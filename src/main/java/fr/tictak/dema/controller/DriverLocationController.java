package fr.tictak.dema.controller;

import fr.tictak.dema.dto.in.DriverLocationMessage;
import fr.tictak.dema.dto.in.DriverStatusMessage;
import fr.tictak.dema.model.LastMinuteMove;
import fr.tictak.dema.model.MissionStatusUpdateRequest;
import fr.tictak.dema.model.MoveRequest;
import fr.tictak.dema.model.Notification;
import fr.tictak.dema.model.enums.MissionStatus;
import fr.tictak.dema.model.user.Driver;
import fr.tictak.dema.repository.DriverRepository;
import fr.tictak.dema.repository.LastMinuteMoveRepository;
import fr.tictak.dema.repository.MoveRequestRepository;
import fr.tictak.dema.service.implementation.MoveServiceImpl;
import fr.tictak.dema.service.implementation.NotificationService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.mongodb.core.geo.GeoJsonPoint;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.stereotype.Controller;

import java.time.Instant;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Controller
@Tag(name = "Gestion des emplacements des chauffeurs", description = "API WebSocket pour la mise √† jour en temps r√©el des statuts et emplacements des chauffeurs. D√©velopp√©e par Mohamed Aichaoui pour BramaSquare.")
public class DriverLocationController {

    private static final Logger logger = LoggerFactory.getLogger(DriverLocationController.class);

    private final SimpMessagingTemplate messagingTemplate;
    private final DriverRepository driverRepository;
    private final MoveServiceImpl moveService;
    private final MoveRequestRepository moveRequestRepository;
    private final LastMinuteMoveRepository lastMinuteMoveRepository;
    private final NotificationService notificationService;
    private final TaskScheduler taskScheduler;

    public DriverLocationController(SimpMessagingTemplate messagingTemplate,
                                    DriverRepository driverRepository,
                                    MoveServiceImpl moveService,
                                    MoveRequestRepository moveRequestRepository,
                                    LastMinuteMoveRepository lastMinuteMoveRepository,
                                    NotificationService notificationService,
                                    TaskScheduler taskScheduler) {
        this.messagingTemplate = messagingTemplate;
        this.driverRepository = driverRepository;
        this.moveService = moveService;
        this.moveRequestRepository = moveRequestRepository;
        this.lastMinuteMoveRepository = lastMinuteMoveRepository;
        this.notificationService = notificationService;
        this.taskScheduler = taskScheduler;
    }

    @Operation(summary = "Mettre √† jour le statut du chauffeur", description = "Met √† jour le statut d'un chauffeur via un message WebSocket. D√©velopp√© par Mohamed Aichaoui pour BramaSquare.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Statut mis √† jour avec succ√®s"),
            @ApiResponse(responseCode = "400", description = "Chauffeur non trouv√©")
    })
    @MessageMapping("/driver/status")
    public void updateDriverStatus(DriverStatusMessage message) {
        logger.info("Mise √† jour du statut re√ßue ‚Äì utilisateur={}, statut={}", message.userId(), message.status());
        Driver driver = driverRepository.findById(message.userId())
                .orElseThrow(() -> {
                    logDriverNotFound(message.userId());
                    return new IllegalArgumentException("Chauffeur non trouv√© : " + message.userId());
                });

        driver.setStatus(message.status());
        driverRepository.save(driver);

        if ("online".equalsIgnoreCase(message.status())) {
            GeoJsonPoint location = driver.getLocation();
            if (location != null) {
                moveService.updateDriverLocation(message.userId(), location.getY(), location.getX());
            }
            Optional<MoveRequest> activeMission = moveRequestRepository.findByDriverIdAndAssignmentStatus(message.userId(), "ASSIGNED");
            if (activeMission.isPresent()) {
                MoveRequest mission = activeMission.get();
                messagingTemplate.convertAndSend("/topic/driver/" + message.userId() + "/mission", mission);
                logger.info("D√©tails de la mission active envoy√©s au chauffeur : {}", message.userId());
            }
        } else {
            moveService.removeOnlineDriver(message.userId());
        }

        GeoJsonPoint location = driver.getLocation();
        if (location != null) {
            String subAdminId = driver.getCreatedBySubAdminId().getId();
            messagingTemplate.convertAndSend(
                    "/topic/subadmin/" + subAdminId + "/drivers",
                    new DriverLocationMessage(message.userId(), location.getY(), location.getX(), message.status())
            );
            logger.info("Message de localisation envoy√© au sous-administrateur {} pour le chauffeur {}", subAdminId, message.userId());
        }
    }

    @Operation(summary = "Mettre √† jour l'emplacement du chauffeur", description = "Met √† jour l'emplacement d'un chauffeur via WebSocket. D√©velopp√© par Mohamed Aichaoui pour BramaSquare.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Emplacement mis √† jour avec succ√®s"),
            @ApiResponse(responseCode = "400", description = "Chauffeur non trouv√©")
    })
    @MessageMapping("/driver/location")
    public void updateDriverLocation(DriverLocationMessage message) {
        logger.info("Mise √† jour de l'emplacement re√ßue ‚Äì utilisateur={}, latitude={}, longitude={}", message.driverId(), message.latitude(), message.longitude());
        Driver driver = driverRepository.findById(message.driverId())
                .orElseThrow(() -> {
                    logDriverNotFound(message.driverId());
                    return new IllegalArgumentException("Chauffeur non trouv√© : " + message.driverId());
                });

        driver.setLocation(new GeoJsonPoint(message.longitude(), message.latitude()));
        driverRepository.save(driver);

        moveService.updateDriverLocation(message.driverId(), message.latitude(), message.longitude());

        String subAdminId = driver.getCreatedBySubAdminId().getId();
        messagingTemplate.convertAndSend("/topic/subadmin/" + subAdminId + "/drivers", message);

        Optional<MoveRequest> activeMission = moveRequestRepository.findByDriverIdAndAssignmentStatus(message.driverId(), "ASSIGNED");

        if (activeMission.isPresent()) {
            MoveRequest mission = activeMission.get();
            String moveId = mission.getMoveId();
            logger.info("Mission active ASSIGNED trouv√©e pour le chauffeur {} ‚Äì moveId={}", message.driverId(), moveId);

            String missionDestination = "/topic/mission/" + moveId + "/driverLocation";
            logger.debug("Envoi de la mise √† jour de la localisation du chauffeur au topic : {}", missionDestination);
            logger.debug("Charge utile de la localisation du chauffeur ‚Äì latitude={}, longitude={}", message.latitude(), message.longitude());

            messagingTemplate.convertAndSend(missionDestination, message);
            logger.info("Mise √† jour de la localisation du chauffeur envoy√©e avec succ√®s √† la mission {} via {}", moveId, missionDestination);
        } else {
            logger.info("Aucune mission active ASSIGNED trouv√©e pour le chauffeur {}", message.driverId());
        }
    }

    @Operation(summary = "Avancer le statut de la mission", description = "Avance le statut de la mission au suivant dans la s√©quence d√©finie. D√©velopp√© par Mohamed Aichaoui pour BramaSquare.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Statut de la mission avanc√© avec succ√®s"),
            @ApiResponse(responseCode = "400", description = "Mission ou chauffeur non valide")
    })

    @MessageMapping("/mission/status/next")
    public void advanceMissionStatus(MissionStatusUpdateRequest request) {
        String moveId = request.getMoveId();
        String driverId = request.getDriverId();

        logger.info("üì© [WS] Re√ßu une demande d'avancement de mission ‚Äì moveId={}, driverId={}", moveId, driverId);
        logger.debug("Contenu de la requ√™te : {}", request);

        // üîç √âtape 1 : Rechercher dans MoveRequest
        Optional<MoveRequest> moveRequestOpt = moveRequestRepository.findById(moveId);
        if (moveRequestOpt.isPresent()) {
            MoveRequest moveRequest = moveRequestOpt.get();
            logger.info("‚úÖ Mission trouv√©e dans MoveRequest ‚Äì ID={}", moveRequest.getMoveId());

            if (moveRequest.getDriver() == null) {
                logger.warn("‚ö†Ô∏è Aucun chauffeur associ√© √† cette mission MoveRequest ID={}", moveId);
                return;
            }

            if (!moveRequest.getDriver().getId().equals(driverId)) {
                logger.warn("‚õî Chauffeur non autoris√© : attendu={}, re√ßu={}", moveRequest.getDriver().getId(), driverId);
                return;
            }

            MissionStatus currentStatus = moveRequest.getMissionStatus();
            MissionStatus nextStatus = currentStatus.next();
            logger.info("üîÑ Passage du statut {} ‚Üí {}", currentStatus.getDescription(), nextStatus.getDescription());

            if (nextStatus == currentStatus) {
                logger.info("‚ÑπÔ∏è La mission est d√©j√† au statut final : {}", currentStatus.getDescription());
                return;
            }

            moveRequest.setMissionStatus(nextStatus);
            moveRequestRepository.save(moveRequest);
            logger.info("üíæ Mission mise √† jour en base ‚Äì moveId={}, nouveauStatut={}", moveId, nextStatus);

            // üîî Notification
            try {
                Notification notification = new Notification();
                notification.setTitle("Mise √† jour du statut de la mission");
                notification.setNotificationType("MISSION_STATUS_UPDATE");
                notification.setRelatedMoveId(moveId);
                notification.setUserId(moveRequest.getClient().getId());
                notification.setStatus("SENT");
                notification.setTimestamp(LocalDateTime.now());
                notification.setRead(false);

                notificationService.sendAndSaveNotification(notification, moveRequest);
                logger.info("üì§ Notification envoy√©e ‚Äì client={}, moveId={}", moveRequest.getClient().getId(), moveId);
            } catch (Exception e) {
                logger.error("‚ùå Erreur lors de l'envoi de la notification ‚Äì moveId={}, erreur={}", moveId, e.getMessage(), e);
            }

            // ‚úÖ Si la mission est termin√©e
            if (nextStatus == MissionStatus.COMPLETED) {
                logger.info("üèÅ Mission termin√©e ‚Äì moveId={}, driverId={}", moveId, driverId);

                moveRequest.setAssignmentStatus("DRIVER_FREE");
                moveRequestRepository.save(moveRequest);
                logger.info("üöó Statut du chauffeur mis √† DRIVER_FREE");

                List<LastMinuteMove> lastMinuteMoves = lastMinuteMoveRepository.findByDriver_Id(moveRequest.getDriver().getId());
                logger.debug("üîç Recherche de LastMinuteMove associ√©s : trouv√©s={}", lastMinuteMoves.size());

                if (lastMinuteMoves != null && !lastMinuteMoves.isEmpty()) {
                    lastMinuteMoveRepository.delete(lastMinuteMoves.getFirst());
                    logger.info("üóëÔ∏è Supprim√© un LastMinuteMove pour le driver {}", driverId);
                } else {
                    logger.info("‚ÑπÔ∏è Aucun LastMinuteMove √† supprimer pour le driver {}", driverId);
                }

                moveService.addOnlineDriver(driverId);
                logger.info("‚úÖ Chauffeur ajout√© √† la liste des drivers en ligne");

                taskScheduler.schedule(() -> moveService.assignNextPendingToDriver(driverId),
                        Instant.now().plusMillis(2000));
                logger.info("üïí T√¢che planifi√©e pour assigner une prochaine mission dans 2 secondes");
            }
            return;
        }

        // üîç √âtape 2 : Rechercher dans LastMinuteMove
        Optional<LastMinuteMove> lastMinuteMoveOpt = lastMinuteMoveRepository.findById(moveId);
        if (lastMinuteMoveOpt.isPresent()) {
            LastMinuteMove lastMinuteMove = lastMinuteMoveOpt.get();
            logger.info("‚úÖ Mission trouv√©e dans LastMinuteMove ‚Äì ID={}", lastMinuteMove.getId());

            if (lastMinuteMove.getDriver() == null) {
                logger.warn("‚ö†Ô∏è Aucun chauffeur associ√© √† cette mission LastMinute ID={}", moveId);
                return;
            }

            if (!lastMinuteMove.getDriver().getId().equals(driverId)) {
                logger.warn("‚õî Chauffeur non autoris√© : attendu={}, re√ßu={}", lastMinuteMove.getDriver().getId(), driverId);
                return;
            }

            MissionStatus currentStatus = lastMinuteMove.getMissionStatus();
            MissionStatus nextStatus = currentStatus.next();
            logger.info("üîÑ Passage du statut (LAST_MINUTE) {} ‚Üí {}", currentStatus.getDescription(), nextStatus.getDescription());

            if (nextStatus == currentStatus) {
                logger.info("‚ÑπÔ∏è La mission (LAST_MINUTE) est d√©j√† au statut final : {}", currentStatus.getDescription());
                return;
            }

            lastMinuteMove.setMissionStatus(nextStatus);
            lastMinuteMoveRepository.save(lastMinuteMove);
            logger.info("üíæ Mission LAST_MINUTE mise √† jour ‚Äì moveId={}, nouveauStatut={}", moveId, nextStatus);

            // üîî Notification
            try {
                Notification notification = new Notification();
                notification.setTitle("Mise √† jour du statut de la mission LAST_MINUTE");
                notification.setNotificationType("MISSION_STATUS_UPDATE");
                notification.setRelatedMoveId(moveId);
                notification.setUserId(lastMinuteMove.getClient().getId());
                notification.setStatus("SENT");
                notification.setTimestamp(LocalDateTime.now());
                notification.setRead(false);

                notificationService.sendAndSaveNotification(notification, lastMinuteMove);
                logger.info("üì§ Notification LAST_MINUTE envoy√©e ‚Äì client={}, moveId={}", lastMinuteMove.getClient().getId(), moveId);
            } catch (Exception e) {
                logger.error("‚ùå Erreur d'envoi de notification LAST_MINUTE ‚Äì moveId={}, erreur={}", moveId, e.getMessage(), e);
            }

            // ‚úÖ Si la mission est termin√©e
            if (nextStatus == MissionStatus.COMPLETED) {
                logger.info("üèÅ Mission LAST_MINUTE termin√©e ‚Äì moveId={}, driverId={}", moveId, driverId);

                lastMinuteMove.setAssignmentStatus("DRIVER_FREE");
                lastMinuteMoveRepository.save(lastMinuteMove);
                logger.info("üöó Statut du chauffeur mis √† DRIVER_FREE");

                moveService.addOnlineDriver(driverId);
                logger.info("‚úÖ Chauffeur ajout√© √† la liste des drivers en ligne");

                taskScheduler.schedule(() -> moveService.assignNextPendingToDriver(driverId),
                        Instant.now().plusMillis(2000));
                logger.info("üïí T√¢che planifi√©e pour assigner une prochaine mission dans 2 secondes");
            }
            return;
        }

        // üö® Aucune mission trouv√©e
        logger.error("‚ùå Mission introuvable dans MoveRequest et LastMinuteMove : moveId={}", moveId);
        messagingTemplate.convertAndSend("/topic/mission/" + moveId + "/status", "Mission non trouv√©e");
        logger.warn("‚ö†Ô∏è Statut 'Mission non trouv√©e' diffus√© au client ‚Äì moveId={}", moveId);
    }


    private void logDriverNotFound(String userId) {
        logger.warn("Chauffeur non trouv√© pour l'ID : {}", userId);
    }
}