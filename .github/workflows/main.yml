name: Template CI - Build & Deploy to OVH

# Pipeline will be triggered on push to the following branches:
on:
  push:
    branches: 
      - "main"
      - "develop"
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
jobs:
  build-test-deploy:
    name: Build, Test & Deploy Template
    runs-on: ubuntu-latest

    env:
      CONTAINER_REGISTRY: "docker-registry.bramasquare.com"
      SSH_USER: "ubuntu"
      DEPLOY_PATH: "/home/ubuntu/docker/tictak"
      
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Set up Environment Variables
        id: setup-env
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "PROFILE=prod" >> $GITHUB_ENV
            echo "SSH_HOST=${{ secrets.SSH_PROD_HOST }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "PROFILE=dev" >> $GITHUB_ENV
            echo "SSH_HOST=${{ secrets.SSH_DEV_HOST }}" >> $GITHUB_ENV
          fi
          REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
          
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

          DOCKER_IMAGE_BASE="$REPO_NAME"
          echo "DOCKER_IMAGE_BASE=$DOCKER_IMAGE_BASE" >> $GITHUB_ENV


      - name: Print Environment Variables
        run: |
          echo "ENVIRONMENT = $ENVIRONMENT"
          echo "CONTAINER_REGISTRY = $CONTAINER_REGISTRY"
          echo "DOCKER_IMAGE_BASE = $DOCKER_IMAGE_BASE"
          echo "PROFILE = $PROFILE"
          echo "SSH_USER = $SSH_USER"
          echo "SSH_HOST = $SSH_HOST"
          echo "DEPLOY_PATH = $DEPLOY_PATH"

      - name: Check Out Repository
        uses: actions/checkout@v3

      - name: Docker Registry - Login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ secrets.NEXUS_USERNAME }}
          password: ${{ secrets.NEXUS_PASSWORD }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_BASE }}-${{ env.ENVIRONMENT }}:latest
          build-args: |
            PROFILE=${{ env.PROFILE }}

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        run: |
          # Validate required variables
          if [ -z "${{ env.SSH_USER }}" ] || [ -z "${{ env.SSH_HOST }}" ] || [ -z "${{ env.ENVIRONMENT }}" ] || [ -z "${{ env.REPO_NAME }}" ]; then
            echo "‚ùå Missing one or more required environment variables: SSH_USER, SSH_HOST, ENVIRONMENT, REPO_NAME"
            exit 1
          fi
          DEPLOY_PATH=${{ env.DEPLOY_PATH }}
          NGINX_CONF="${{ env.REPO_NAME }}-${{ env.ENVIRONMENT }}.conf"
          if [ -z "$DEPLOY_PATH" ] || [ -z "$NGINX_CONF" ]; then
              echo "‚ùå Missing DEPLOY_PATH or NGINX_CONF on remote host"
              exit 1
          fi
          echo "Creating DEPLOY_PATH on remote server if it doesn't exist..."
          ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "DEPLOY_PATH='${{ env.DEPLOY_PATH }}'; mkdir -p \$DEPLOY_PATH"


          echo "‚úÖ SSH_USER      = ${{ env.SSH_USER }}"
          echo "‚úÖ SSH_HOST      = ${{ env.SSH_HOST }}"
          echo "‚úÖ ENVIRONMENT   = ${{ env.ENVIRONMENT }}"
          echo "‚úÖ REPO_NAME     = ${{ env.REPO_NAME }}"
          echo "‚úÖ DEPLOY_PATH   = $DEPLOY_PATH"
          echo "‚úÖ NGINX_CONF    = $NGINX_CONF"

          echo "üì¶ Copying files to remote server..."
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null docker-compose-${{ env.REPO_NAME }}.yml ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:$DEPLOY_PATH/

          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null .github/workflows/$NGINX_CONF ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:$DEPLOY_PATH/

          echo "üöÄ Running remote deployment..."
          ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} \
          "ENVIRONMENT='${{ env.ENVIRONMENT }}' REPO_NAME='${{ env.REPO_NAME }}' REGISTRY='${{ env.CONTAINER_REGISTRY }}' USERNAME='${{ secrets.NEXUS_USERNAME }}' PASSWORD='${{ secrets.NEXUS_PASSWORD }}'  DEPLOY_PATH='${{ env.DEPLOY_PATH }}' NGINX_CONF='${{ env.REPO_NAME }}-${{ env.ENVIRONMENT }}.conf' bash -s" << 'REMOTE_SCRIPT'
            set -e

            echo "üîß ENVIRONMENT   = $ENVIRONMENT"
            echo "üîß REPO_NAME     = $REPO_NAME"
            echo "üîß DEPLOY_PATH   = $DEPLOY_PATH"
            echo "üîß NGINX_CONF    = $NGINX_CONF"

            if [ -z "$DEPLOY_PATH" ] || [ -z "$NGINX_CONF" ]; then
              echo "‚ùå Missing DEPLOY_PATH or NGINX_CONF on remote host"
              exit 1
            fi
            echo "üìÇ Copying nginx config to /etc/nginx/conf.d/..."
            sudo cp "$DEPLOY_PATH/$NGINX_CONF" /etc/nginx/conf.d/

            echo "üîê Logging into Docker registry..."
            echo "$PASSWORD" | docker login "$REGISTRY" -u "$USERNAME" --password-stdin

            echo "üê≥ Deploying docker compose services..."
            cd "$DEPLOY_PATH"
            docker compose -f docker-compose-$REPO_NAME.yml pull
            docker compose -f docker-compose-$REPO_NAME.yml up -d

            echo "‚úÖ Deployment completed on remote host."